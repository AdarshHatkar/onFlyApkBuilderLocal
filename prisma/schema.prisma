generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model all_owners {
  ownerId                  Int                       @id @default(autoincrement())
  email                    String                    @unique(map: "email") @db.VarChar(100)
  countryCode              Int
  mobileNumber             String                    @db.VarChar(10)
  depositCredit            Decimal                   @db.Decimal(7, 2)
  bonusCredit              Decimal                   @db.Decimal(7, 2)
  fullName                 String                    @db.VarChar(100)
  updatedAt                Int
  createdAt                Int
  password                 String                    @db.VarChar(100)
  all_users                all_users[]
  all_web_apks             all_web_apks[]
  announcements            announcements[]
  carousels                carousels[]
  custom_room_details      custom_room_details[]
  custom_ui                custom_ui[]
  matches                  matches[]
  matches_joinings         matches_joinings[]
  owners_credential_status owners_credential_status?
  owners_deposit_log       owners_deposit_log[]
  owners_email_log         owners_email_log[]
  owners_plan_details      owners_plan_details?
  owners_referrals_log     owners_referrals_log[]
  owners_wallet_history    owners_wallet_history[]
  refer_and_earn_configs   refer_and_earn_configs?
  users_deposit_log        users_deposit_log[]
  users_withdraw_log       users_withdraw_log[]
  wallet_configs           wallet_configs?
  web_apk_details          web_apk_details?
  web_app_details          web_app_details[]
  withdrawal_methods       withdrawal_methods[]
}

model all_users {
  userId                  Int                       @id @default(autoincrement())
  ownerId                 Int
  fullName                String                    @db.VarChar(100)
  email                   String                    @db.VarChar(100)
  countryCode             Int
  mobileNumber            String                    @db.VarChar(10)
  depositCredit           Decimal                   @db.Decimal(7, 2)
  winCredit               Decimal                   @db.Decimal(7, 2)
  bonusCredit             Decimal                   @db.Decimal(7, 2)
  updatedAt               Int
  createdAt               Int
  password                String                    @db.VarChar(100)
  all_owners              all_owners                @relation(fields: [ownerId], references: [ownerId], onDelete: Cascade, map: "all_users_to_all_owners")
  matches_joinings        matches_joinings[]
  users_active_sessions   users_active_sessions[]
  users_credential_status users_credential_status[]
  users_deposit_log       users_deposit_log[]
  users_referrals_log     users_referrals_log[]
  users_wallet_history    users_wallet_history[]
  users_withdraw_log      users_withdraw_log[]

  @@index([ownerId], map: "all_users_to_all_owners")
}

model owners_credential_status {
  sn                     Int        @id @default(autoincrement())
  ownerId                Int        @unique(map: "ownerId")
  isEmailVerified        Boolean
  isMobileNumberVerified Boolean
  all_owners             all_owners @relation(fields: [ownerId], references: [ownerId], onDelete: Cascade, map: "owners_credential_status_to_all_owners")
}

model owners_plan_details {
  sn            Int        @id @default(autoincrement())
  ownerId       Int        @unique(map: "ownerId")
  activePlan    String     @default("free") @db.VarChar(10)
  purchasePrice Decimal    @db.Decimal(7, 2)
  startedAt     Int
  validTill     Int
  all_owners    all_owners @relation(fields: [ownerId], references: [ownerId], onDelete: Cascade, map: "owners_plan_details_to_all_owners")
}

model owners_referrals_log {
  sn                 Int        @id @default(autoincrement())
  ownerId            Int
  referredById       Int
  referredByEarnings Decimal    @db.Decimal(7, 2)
  all_owners         all_owners @relation(fields: [ownerId], references: [ownerId], onDelete: Cascade, map: "owners_referrals_log_to_all_owners")

  @@index([ownerId], map: "owners_referrals_log_to_all_owners")
}

model web_apk_details {
  sn                Int        @id @default(autoincrement())
  ownerId           Int        @unique(map: "ownerId")
  oldVersion        Int
  newVersion        Int
  googleServiceJson String     @db.Text
  oneSignalAppId    String     @db.Text
  oneSignalApiKey   String     @db.Text
  all_owners        all_owners @relation(fields: [ownerId], references: [ownerId], onDelete: Cascade, map: "web_apk_details_to_all_owners")
}

model web_app_details {
  sn         Int        @id @default(autoincrement())
  ownerId    Int
  name       String     @db.VarChar(100)
  username   String     @unique(map: "username") @db.VarChar(100)
  all_owners all_owners @relation(fields: [ownerId], references: [ownerId], onDelete: Cascade, map: "web_app_details_to_all_owners")

  @@index([ownerId], map: "web_app_details_to_all_owners")
}

model users_credential_status {
  sn                     Int       @id @default(autoincrement())
  userId                 Int
  isEmailVerified        Boolean
  isMobileNumberVerified Boolean
  all_users              all_users @relation(fields: [userId], references: [userId], onDelete: Cascade, map: "users_credential_status_to_all_users")

  @@index([userId], map: "users_credential_status_to_all_users")
}

model users_referrals_log {
  sn                 Int       @id @default(autoincrement())
  userId             Int
  referredById       Int
  referredByEarnings Decimal   @db.Decimal(7, 2)
  all_users          all_users @relation(fields: [referredById], references: [userId], onDelete: Cascade, map: "users_referrals_log_to_all_users")

  @@index([referredById], map: "users_referrals_log_to_all_users")
}

model owners_email_log {
  sn         Int        @id @default(autoincrement())
  ownerId    Int
  type       String     @db.VarChar(50)
  token      Int
  createdAt  Int
  all_owners all_owners @relation(fields: [ownerId], references: [ownerId], onDelete: Cascade, map: "owners_email_log_to_all_owners")

  @@index([ownerId], map: "owners_email_log_to_all_owners")
}

model owners_active_sessions {
  sn             Int @id @default(autoincrement())
  ownerId        Int
  createdAt      Int
  validTill      Int
  refreshTokenId Int
}

model owners_deposit_log {
  sn                 Int        @id @default(autoincrement())
  ownerId            Int
  orderId            Int        @unique(map: "orderId")
  status             String     @db.VarChar(10)
  response           String     @db.VarChar(100)
  walletUpdateStatus Boolean
  clientLocationUrl  String     @db.VarChar(100)
  createdAt          Int
  all_owners         all_owners @relation(fields: [ownerId], references: [ownerId], onDelete: Cascade, map: "owners_deposit_log_to_all_owners")

  @@index([ownerId], map: "owners_deposit_log_to_all_owners")
}

model owners_wallet_history {
  sn              Int        @id @default(autoincrement())
  ownerId         Int
  walletType      String     @db.VarChar(20)
  transactionType String     @db.VarChar(10)
  comment         String     @db.Text
  amount          Decimal    @db.Decimal(7, 2)
  closingBalance  Decimal    @db.Decimal(7, 2)
  createdAt       Int
  all_owners      all_owners @relation(fields: [ownerId], references: [ownerId], onDelete: Cascade, map: "owners_wallet_history_to_all_owners")

  @@index([ownerId], map: "owners_wallet_history_to_all_owners")
}

model all_masters {
  masterId    Int    @id @default(autoincrement())
  email       String @db.VarChar(50)
  password    String @db.VarChar(100)
  lastLoginAt Int
}

model users_active_sessions {
  sn             Int       @id @default(autoincrement())
  ownerId        Int
  userId         Int
  createdAt      Int
  validTill      Int
  refreshTokenId Int
  all_users      all_users @relation(fields: [userId], references: [userId], onDelete: Cascade, map: "users_active_sessions_to_all_users")

  @@index([userId], map: "users_active_sessions_to_all_users")
}

model users_deposit_log {
  sn                      Int        @id @default(autoincrement())
  ownerId                 Int
  userId                  Int
  orderId                 Int
  status                  String     @db.VarChar(10)
  response                String     @db.VarChar(100)
  ownerWalletUpdateStatus Boolean
  clientLocationUrl       String     @db.VarChar(100)
  paymentGateway          String     @db.VarChar(50)
  createdAt               Int
  all_owners              all_owners @relation(fields: [ownerId], references: [ownerId], onDelete: Cascade, map: "users_deposit_log_to_all_owners")
  all_users               all_users  @relation(fields: [userId], references: [userId], onDelete: Cascade, map: "users_deposit_log_to_all_users")

  @@index([ownerId], map: "users_deposit_log_to_all_owners")
  @@index([userId], map: "users_deposit_log_to_all_users")
}

model users_wallet_history {
  sn              Int       @id @default(autoincrement())
  userId          Int
  walletType      String    @db.VarChar(20)
  transactionType String    @db.VarChar(10)
  comment         String    @db.Text
  amount          Decimal   @db.Decimal(7, 2)
  closingBalance  Decimal   @db.Decimal(7, 2)
  createdAt       Int
  all_users       all_users @relation(fields: [userId], references: [userId], onDelete: Cascade, map: "users_wallet_history_to_all_users")

  @@index([userId], map: "users_wallet_history_to_all_users")
}

model app_support_details {
  sn          Int    @id @default(autoincrement())
  ownerId     Int
  methodName  String @db.VarChar(20)
  methodId    String @db.VarChar(50)
  icon        String @db.VarChar(10)
  onClickLink String @db.VarChar(100)

  @@index([ownerId], map: "ownerId")
}

model games {
  sn         Int       @id @default(autoincrement())
  ownerId    Int
  name       String    @db.VarChar(50)
  shortName  String    @db.VarChar(50)
  bannerLink String    @db.Text
  matches    matches[]
}

model rules {
  sn                Int               @id @default(autoincrement())
  ownerId           Int
  collectionId      Int
  text              String            @db.VarChar(200)
  rules_collections rules_collections @relation(fields: [collectionId], references: [sn], onDelete: Cascade, map: "rules_to_rules_collections")

  @@index([collectionId], map: "rules_to_rules_collections")
}

model rules_collections {
  sn      Int       @id @default(autoincrement())
  ownerId Int
  name    String    @db.VarChar(50)
  matches matches[]
  rules   rules[]
}

model custom_room_details {
  sn           Int        @id @default(autoincrement())
  ownerId      Int
  matchId      Int        @unique(map: "matchId")
  roomId       String     @db.VarChar(100)
  roomPassword String     @db.VarChar(100)
  updatedAt    Int?
  all_owners   all_owners @relation(fields: [ownerId], references: [ownerId], onDelete: Cascade, map: "custom_room_details_to_all_owners")
  matches      matches    @relation(fields: [matchId], references: [sn], onDelete: Cascade, map: "custom_room_details_to_matches")

  @@index([ownerId], map: "custom_room_details_to_all_owners")
}

model matches {
  sn                  Int                  @id @default(autoincrement())
  ownerId             Int
  title               String               @db.VarChar(100)
  bannerLink          String               @db.Text
  youtubeLink         String               @db.Text
  status              String               @db.VarChar(50)
  gameId              Int
  rulesCollectionId   Int?
  prizePool           Decimal              @db.Decimal(7, 2)
  perKill             Decimal              @db.Decimal(7, 2)
  entryFees           Decimal              @db.Decimal(7, 2)
  playersInTeam       Int
  mode                String               @db.VarChar(10)
  map                 String               @db.VarChar(50)
  maxJoining          Int
  prizeDescription    String               @db.Text
  resultNote          String               @db.Text
  time                Int
  custom_room_details custom_room_details?
  all_owners          all_owners           @relation(fields: [ownerId], references: [ownerId], onDelete: Cascade, map: "matches_to_all_owners")
  games               games                @relation(fields: [gameId], references: [sn], onDelete: Cascade, map: "matches_to_games")
  rules_collections   rules_collections?   @relation(fields: [rulesCollectionId], references: [sn], map: "matches_to_rules_collections")
  matches_joinings    matches_joinings[]

  @@index([ownerId], map: "matches_to_all_owners")
  @@index([gameId], map: "matches_to_games")
  @@index([rulesCollectionId], map: "matches_to_rules_collections")
}

model matches_joinings {
  sn                  Int        @id @default(autoincrement())
  ownerId             Int
  matchId             Int
  joinedBy            Int
  inGameName          String     @db.VarChar(100)
  inGameId            String     @db.VarChar(100)
  kills               Int
  isWinner            Boolean
  winnerPrize         Decimal    @db.Decimal(7, 2)
  totalWinning        Decimal    @db.Decimal(7, 2)
  isUserWalletUpdated Boolean
  all_owners          all_owners @relation(fields: [ownerId], references: [ownerId], onDelete: Cascade, map: "matches_joinings_to_all_owners")
  all_users           all_users  @relation(fields: [joinedBy], references: [userId], onDelete: Cascade, map: "matches_joinings_to_all_users")
  matches             matches    @relation(fields: [matchId], references: [sn], onDelete: Cascade, map: "matches_joinings_to_matches")

  @@index([ownerId], map: "matches_joinings_to_all_owners")
  @@index([joinedBy], map: "matches_joinings_to_all_users")
  @@index([matchId], map: "matches_joinings_to_matches")
}

model all_web_apks {
  sn            Int        @id @default(autoincrement())
  ownerId       Int
  version       Int
  logoLink      String     @db.VarChar(100)
  apkLink       String     @db.VarChar(100)
  aabLink       String     @db.VarChar(100)
  customApkLink String     @db.VarChar(100)
  orderType     String     @db.VarChar(20)
  status        String     @db.VarChar(10)
  createdAt     Int
  updatedAt     Int?
  all_owners    all_owners @relation(fields: [ownerId], references: [ownerId], onDelete: Cascade, map: "all_web_apks_to_all_owners")

  @@index([ownerId], map: "all_web_apks_to_all_owners")
}

model masters_active_sessions {
  sn             Int @id @default(autoincrement())
  masterId       Int
  createdAt      Int
  validTill      Int
  refreshTokenId Int
}

model owners_withdraw_log {
  sn         Int     @id @default(autoincrement())
  ownerId    Int
  status     String  @db.VarChar(10)
  amount     Decimal @db.Decimal(7, 2)
  methodName String  @db.VarChar(10)
  methodId   String  @db.VarChar(50)
  comment    String  @db.VarChar(200)
  updatedAt  Int
  createdAt  Int
}

model users_withdraw_log {
  sn         Int        @id @default(autoincrement())
  ownerId    Int
  userId     Int
  status     String     @db.VarChar(10)
  amount     Decimal    @db.Decimal(7, 2)
  methodName String     @db.VarChar(10)
  methodId   String     @db.VarChar(50)
  comment    String     @db.VarChar(200)
  updatedAt  Int
  createdAt  Int
  all_owners all_owners @relation(fields: [ownerId], references: [ownerId], onDelete: Cascade, map: "users_redeem_log_to_all_owners")
  all_users  all_users  @relation(fields: [userId], references: [userId], onDelete: Cascade, map: "users_redeem_log_to_all_users")

  @@index([ownerId], map: "users_redeem_log_to_all_owners")
  @@index([userId], map: "users_redeem_log_to_all_users")
}

model carousels {
  sn          Int        @id @default(autoincrement())
  ownerId     Int
  bannerLink  String     @db.VarChar(200)
  onClickLink String     @db.VarChar(200)
  all_owners  all_owners @relation(fields: [ownerId], references: [ownerId], onDelete: Cascade, map: "carousels_to_all_owners")

  @@index([ownerId], map: "carousels_to_all_owners")
}

model announcements {
  sn          Int        @id @default(autoincrement())
  ownerId     Int
  message     String     @db.VarChar(200)
  onClickLink String     @db.VarChar(200)
  all_owners  all_owners @relation(fields: [ownerId], references: [ownerId], onDelete: Cascade, map: "announcements_to_all_owners")

  @@index([ownerId], map: "announcements_to_all_owners")
}

model refer_and_earn_configs {
  sn                   Int        @id @default(autoincrement())
  ownerId              Int        @unique(map: "ownerId")
  referRewardCoin      String     @db.VarChar(20)
  referRewardAmount    Decimal    @db.Decimal(7, 2)
  registerRewardCoin   String     @db.VarChar(20)
  registerRewardAmount Decimal    @db.Decimal(7, 2)
  minimumMatchFees     Decimal    @db.Decimal(7, 2)
  all_owners           all_owners @relation(fields: [ownerId], references: [ownerId], onDelete: Cascade, map: "refer_and_earn_configs_to_all_owners")
}

model wallet_configs {
  sn                           Int        @id @default(autoincrement())
  ownerId                      Int        @unique(map: "ownerId")
  minimumDeposit               Decimal    @db.Decimal(7, 2)
  maximumDeposit               Decimal    @db.Decimal(7, 2)
  minimumWithdrawal            Decimal    @db.Decimal(7, 2)
  maximumWithdrawal            Decimal    @db.Decimal(7, 2)
  withdrawalChargeInPercentage Int
  activePaymentGateway         String     @db.VarChar(50)
  paytmMerchantId              String     @db.VarChar(100)
  paytmMerchantKey             String     @db.VarChar(100)
  all_owners                   all_owners @relation(fields: [ownerId], references: [ownerId], onDelete: Cascade, map: "wallet_configs_to_all_owners")
}

model withdrawal_methods {
  sn         Int        @id @default(autoincrement())
  ownerId    Int
  name       String     @db.VarChar(50)
  title      String     @db.VarChar(50)
  idExample  String     @db.VarChar(50)
  all_owners all_owners @relation(fields: [ownerId], references: [ownerId], onDelete: Cascade, map: "withdrawal_methods_to_all_owners")

  @@index([ownerId], map: "withdrawal_methods_to_all_owners")
}

model custom_ui {
  sn         Int        @id @default(autoincrement())
  ownerId    Int
  data       String     @db.LongText
  all_owners all_owners @relation(fields: [ownerId], references: [ownerId], onDelete: Cascade, map: "custom_ui_to_all_owners")

  @@index([ownerId], map: "custom_ui_to_all_owners")
}
